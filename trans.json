In this lesson we're going to introduce
you to stack data structure. Data structures, as we know, are ways to
store and organize data in computers. So far, in the series we have discussed
some of the data structures. We have talked about arrays and linked
lists. Now in this lesson we are going to
talk about stacks and we are going to talk about stack as abstract data type or ADT. When we talk about a data structure
as abstract data type, we talk only about
the features or operations available with the data
structure. We do not go into implementation details.
So basically we define the data structured only as a mathematical or
logical model. We'll go into implementation of stack in
later lessons. In this lesson, we're going to talk only
about stack ADT. So we are only going to have a look at
the logical view of stack. Stack as a data structure in
computer science is not very different from stack as a way of organizing objects, in real world. Here are some examples of
stack from real world: First figure is of a stack of dinner
plates. Second figure is of a mathematical
puzzle, called tower of hanoi, where we have three rods or
three pegs and multiple disks and the game is about moving a stack of
discs, from one peg to another with this
constraint that, a disc can not go on top of a smaller
disc. Third figure is of a pack of Tennis balls. Stack basically is a collection with
this property, that an item in the stack must be inserted
or removed, from the same end that we call the top
of stack. In fact this is not just a property, this
is a constraint or restriction. Only the top of a stack is accessible and
any item has to be inserted or removed from the top. A stack is
also called 'last in first out' collection. Most recently added item in a stack has to go
out first. In the first example, you will always
pick up a dinner plate from top of the stack and
if you will have to put a plate back into the stack, you will
always put it back on top of the stack. You can argue, that I
can slip out a plate from in between without actually
removing the plates on the top. So the constraint that I should take
out a plate always from the top is not strictly enforced. For the sake of
argument, this is fine. You can say this. In other
two examples where we have discs in a pag, and tennis balls in this box that can open only from one side,
there is no way you can take out an item from in between. Any insertion of removal has to happen
from top. You can not slip out an item from in
between. You can take out an item, but for that you will have to remove all
the items on top of that item. Let's now formally define stack as an
abstract data tape. A stack is a list or collection with the
restriction that insertion and deletion can be performed only from
one end, that we call the top of stack. Let's
now define the interface or operations available with stack ADT. There are two fundamental
operations available with a stack. An insertion is called a 'push' operation. 'push' operation can insert or push some
item 'X' onto the stack. Another operation,
second operation is called 'pop'. 'pop' is removing the most recent item from the stack,
most recent element from the stack. 'push' and 'pop' are the fundamental
operations and there can be few more. Typically there is
one operation called 'top', that simply returns the element at
top of the stack. And there can be an operation to check
wheather a stack is empty or not. So this
operation will return true if the stack is empty, false
otherwise. So 'push' is inserting an element on top
of stack and 'pop' is removing an element from
top of stack. We can 'push' or 'pop' only one element at a
time. All these operations that have written
here can be performed in constant time, or in other words their
time complexity is O(1). Remember an element that is pushed or
inserted last on to a stack, is popped or removed first. So stack is
called 'last in first out' structure, what goes in
last comes out first. 'last in first out', in short is called
'LIFO'. Logically a stack is represented
something like this: As a three sided figure, as a container open from one side. This is representation
of an empty stack. Let's name this stack 's'.
Let's say this figure is representing a stack of integers. Right now the stack is empty. I will
perform push and pop operations to insert and remove integers from the
stack. I will first write down the operations here and
then show you what will happen in the logical
representation. Let's first perform a 'push'. I want to 'push' number 2 on to
the stack. The stack is empty right now, so we
can not 'pop' anything. After the 'push', stack will look
something like this: There is only one integer in the stack, so
of course its on 'top'. Let's 'push' another integer. This time, I want to 'push' number 10. And now lets say we want to perform a 'pop'. The integer at 'top' right now is 10. With a 'pop', it will be removed from
the stack. Let's do few more 'push'. I just pushed
7 and 5 onto the stack. At this stage, if I will call 'top'
operation, it will return me number 5. 'IsEmpty' will return me false. At this stage, a 'pop' will remove 5 from the stack. As you can see the element, the
integer which is coming last, is going out first, That's why we call
stack 'last in first out' data structure. We can 'pop' till the stack gets empty. One more 'pop', and stack will be empty. So this pretty much is stack data
structure. Now one obvious question can be what are the real scenarios where stack helps us. Let's list down some of the
applications of stack. Stack data structure is used for
execution of function calls in a program. We have talked about this quite a bit in
our lessons on dynamic memory allocation and linked lists. We can also say that stack is used for
recursion, because recursion is also a chain of function
calls. It's just that, all the calls are to the same function.
To know more about this application, you can check the description of this video,
for a link to 'MyCodeSchool' lesson on dynamic memory allocation. Another application of stack is we can
use it to implement undo operation, in an editor. We can perform undo
operation in any text editor or image editor. Right now,
I'm pressing 'Ctrl Z', and as you can see some of the text
that I have written, is getting cleared. You can implement this using a stack. Stack is used in a number of important
algorithms, like for example a compiler verifies
whether parentheses in a source code are
balanced or not using Stack data structure. Corresponding
to each opening curly brace or opening
parentheses in a source code, there must be a closing parentheses at appropriate
position. And if parentheses in a source code are
not put properly, if they're not balanced, compiler should throw error and this check can be
performed using a stack. We will discuss some of these problems
in detail in coming lessons. This much is good for an introduction. In
our next lesson we will discuss implementation of stack. This is it for
this lesson. Thanks for watching!! 